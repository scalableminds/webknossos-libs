version: 2
jobs:
  build_test_deploy:
    machine: true
    steps:
      - checkout

      - run:
          name: Install tools
          command: |
            sudo apt-get update
            sudo apt-get install jq -y

      - run:
          name: Build docker image
          command: docker build -t "scalableminds/webknossos-cuber:${CIRCLE_BUILD_NUM}" .

      - run:
          name: Decompress test data
          command: tar -xzvf testdata/WT1_wkw.tar.gz

      - run:
          name: Check formatting
          command: |
            set -x
            docker run \
              --rm \
              --entrypoint "/bin/bash" \
              -w "/" \
              scalableminds/webknossos-cuber:${CIRCLE_BUILD_NUM} \
              -c "black --check /app/wkcuber"

      - run:
          name: Python tests
          command: |
            set -x
            mkdir -p testoutput
            docker run \
              -v "${PWD}/testdata:/testdata" \
              -v "${PWD}/testoutput:/testoutput" \
              --rm \
              --entrypoint "/bin/bash" \
              -w "/" \
              scalableminds/webknossos-cuber:${CIRCLE_BUILD_NUM} \
              -c "py.test /app/tests"

      - run:
          name: Test tiff cubing
          command: |
            set -x
            mkdir -p testoutput/tiff
            docker run \
              -v "${PWD}/testdata:/testdata" \
              -v "${PWD}/testoutput:/testoutput" \
              --rm \
              scalableminds/webknossos-cuber:${CIRCLE_BUILD_NUM} \
              wkcuber.cubing \
              --verbose \
              --jobs 2 \
              --batch_size 8 \
              --layer_name color \
              /testdata/tiff /testoutput/tiff
            [ -d testoutput/tiff/color ]
            [ -d testoutput/tiff/color/1 ]
            [ $(find testoutput/tiff/color/1 -mindepth 3 -name "*.wkw" | wc -l) -eq 1 ]

      - run:
          name: Test DM3 cubing
          command: |
            set -x
            mkdir -p testdata/dm3
            mkdir -p testoutput/dm3
            wget http://www.loci.wisc.edu/files/software/data/dnasample1.zip
            unzip -d testdata/dm3 dnasample1.zip dnasample1.dm3
            docker run \
              -v "${PWD}/testdata:/testdata" \
              -v "${PWD}/testoutput:/testoutput" \
              --rm \
              scalableminds/webknossos-cuber:${CIRCLE_BUILD_NUM} \
              wkcuber.cubing \
              --verbose \
              --jobs 1 \
              --layer_name color \
              /testdata/dm3 /testoutput/dm3
            [ -d testoutput/dm3/color ]
            [ -d testoutput/dm3/color/1 ]
            [ $(find testoutput/dm3/color/1 -mindepth 3 -name "*.wkw" | wc -l) -eq 16 ]

      - run:
          name: Test tile cubing
          command: |
            set -x
            mkdir -p testoutput/temca2
            docker run \
              -v "${PWD}/testdata:/testdata" \
              -v "${PWD}/testoutput:/testoutput" \
              --rm \
              scalableminds/webknossos-cuber:${CIRCLE_BUILD_NUM} \
              wkcuber.tile_cubing \
              --verbose \
              --jobs 2 \
              --batch_size 8 \
              --layer_name color \
              /testdata/temca2 /testoutput/temca2
            [ -d testoutput/temca2/color ]
            [ -d testoutput/temca2/color/1 ]
            [ $(find testoutput/temca2/color/1 -mindepth 3 -name "*.wkw" | wc -l) -eq 8 ]

      - run:
          name: Test simple tiff cubing
          command: |
            set -x
            mkdir -p testoutput/tiff2
            docker run \
              -v "${PWD}/testdata:/testdata" \
              -v "${PWD}/testoutput:/testoutput" \
              --rm \
              scalableminds/webknossos-cuber:${CIRCLE_BUILD_NUM} \
              wkcuber \
              --verbose \
              --jobs 2 \
              --batch_size 8 \
              --layer_name color \
              --max_mag 4 \
              --scale 11.24,11.24,25 \
              --name awesome_data \
              /testdata/tiff /testoutput/tiff2
            [ -d testoutput/tiff2/color ]
            [ -d testoutput/tiff2/color/1 ]
            [ $(find testoutput/tiff2/color/1 -mindepth 3 -name "*.wkw" | wc -l) -eq 1 ]
            [ -e testoutput/tiff2/datasource-properties.json ]

      - run:
          name: Test simple tiff cubing (no compression)
          command: |
            set -x
            mkdir -p testoutput/tiff3
            docker run \
              -v "${PWD}/testdata:/testdata" \
              -v "${PWD}/testoutput:/testoutput" \
              --rm \
              scalableminds/webknossos-cuber:${CIRCLE_BUILD_NUM} \
              wkcuber \
              --verbose \
              --jobs 2 \
              --batch_size 8 \
              --layer_name color \
              --max_mag 4 \
              --no_compress \
              --scale 11.24,11.24,25 \
              --name awesome_data \
              /testdata/tiff /testoutput/tiff3
            [ -d testoutput/tiff3/color ]
            [ -d testoutput/tiff3/color/1 ]
            [ $(find testoutput/tiff3/color/1 -mindepth 3 -name "*.wkw" | wc -l) -eq 1 ]
            [ -e testoutput/tiff3/datasource-properties.json ]

      - run:
          name: Test KNOSSOS conversion
          command: |
            set -x
            mkdir -p testoutput/knossos
            docker run \
              -v "${PWD}/testdata:/testdata" \
              -v "${PWD}/testoutput:/testoutput" \
              --rm \
              scalableminds/webknossos-cuber:${CIRCLE_BUILD_NUM} \
              wkcuber.convert_knossos \
              --verbose \
              --jobs 2 \
              --dtype uint8 \
              --layer_name color \
              --mag 1 \
              /testdata/knossos/color/1 /testoutput/knossos
            [ -d testoutput/knossos/color ]
            [ -d testoutput/knossos/color/1 ]
            [ $(find testoutput/knossos/color/1 -mindepth 3 -name "*.wkw" | wc -l) -eq 1 ]

      - run:
          name: Decompress reference magnification data
          command: mkdir -p testdata/tiff_mag_2_reference && tar -xzvf testdata/tiff_mag_2_reference.tar.gz -C testdata/tiff_mag_2_reference

      - run:
          name: Test downsampling
          command: |
            set -x
            docker run \
              -v "${PWD}/testoutput:/testoutput" \
              --rm \
              scalableminds/webknossos-cuber:${CIRCLE_BUILD_NUM} \
              wkcuber.downsampling \
              --verbose \
              --jobs 2 \
              --max 8 \
              --buffer_cube_size 128 \
              --layer_name color \
              /testoutput/tiff
            [ -d testoutput/tiff/color/2 ]
            [ -d testoutput/tiff/color/4 ]
            [ -d testoutput/tiff/color/8 ]
            [ -n testoutput/tiff/color/16 ]
            [ $(find testoutput/tiff/color/2 -mindepth 3 -name "*.wkw" | wc -l) -eq 1 ]
            [ $(find testoutput/tiff/color/4 -mindepth 3 -name "*.wkw" | wc -l) -eq 1 ]
            [ $(find testoutput/tiff/color/8 -mindepth 3 -name "*.wkw" | wc -l) -eq 1 ]
            cmp --silent testoutput/tiff/color/2/z0/y0/x0.wkw testdata/tiff_mag_2_reference/color/2/z0/y0/x0.wkw

      - run:
          name: Test compression
          command: |
            set -x
            docker run \
              -v "${PWD}/testoutput:/testoutput" \
              --rm \
              scalableminds/webknossos-cuber:${CIRCLE_BUILD_NUM} \
              wkcuber.compress \
              --verbose \
              --jobs 2 \
              --layer_name color \
              /testoutput/tiff /testoutput/tiff_compress
            [ -d testoutput/tiff_compress/color/1 ]
            [ -d testoutput/tiff_compress/color/2 ]
            [ -d testoutput/tiff_compress/color/4 ]
            [ -d testoutput/tiff_compress/color/8 ]

      - run:
          name: Test in-place compression
          command: |
            set -x
            cp -r testoutput/tiff testoutput/tiff_compress2
            docker run \
              -v "${PWD}/testoutput:/testoutput" \
              --rm \
              scalableminds/webknossos-cuber:${CIRCLE_BUILD_NUM} \
              wkcuber.compress \
              --verbose \
              --jobs 2 \
              --layer_name color \
              /testoutput/tiff_compress2

      - run:
          name: Test metadata generation
          command: |
            set -x
            docker run \
              -v "${PWD}/testoutput:/testoutput" \
              --rm \
              scalableminds/webknossos-cuber:${CIRCLE_BUILD_NUM} \
              wkcuber.metadata \
              --name test_dataset \
              --scale 11.24,11.24,25 \
              /testoutput/tiff
            [ -e testoutput/tiff/datasource-properties.json ]
            jq --argfile a testdata/tiff/datasource-properties.fixture.json --argfile b testoutput/tiff/datasource-properties.json -n '$a == $b'
            # diff testdata/tiff/datasource-properties.fixture.json testoutput/tiff/datasource-properties.json

      - run:
          name: Push docker images
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            docker tag \
              scalableminds/webknossos-cuber:$CIRCLE_BUILD_NUM \
              scalableminds/webknossos-cuber:$CIRCLE_BRANCH
            docker push scalableminds/webknossos-cuber:$CIRCLE_BUILD_NUM
            docker push scalableminds/webknossos-cuber:$CIRCLE_BRANCH
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker tag scalableminds/webknossos-cuber:$CIRCLE_BUILD_NUM scalableminds/webknossos-cuber:latest
              docker push scalableminds/webknossos-cuber:latest
            fi
            docker logout

workflows:
  version: 2
  default:
    jobs:
      - build_test_deploy
