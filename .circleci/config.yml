version: 2
jobs:
  build_test_deploy:
    machine: true
    steps:
      - checkout

      - run:
          name: Install tools
          command: |
            sudo apt-get update
            sudo apt-get install jq -y

      - run:
          name: Build docker image
          command: tests/scripts/build_docker_image.sh

      - run:
          name: Decompress test data
          command: tests/scripts/decompress_test_data.sh

      - run:
          name: Check formatting
          command: tests/scripts/check_formatting.sh

      - run:
          name: Python tests
          command: tests/scripts/python_tests.sh

      - run:
          name: Test tiff cubing
          command: tests/scripts/tiff_cubing.sh

      # - run:
      #     name: Test DM3 cubing
      #     command: |
      #       set -x
      #       mkdir -p testdata/dm3
      #       mkdir -p testoutput/dm3
      #       wget http://www.loci.wisc.edu/files/software/data/dnasample1.zip
      #       unzip -d testdata/dm3 dnasample1.zip dnasample1.dm3
      #       docker run \
      #         -v "${PWD}/testdata:/testdata" \
      #         -v "${PWD}/testoutput:/testoutput" \
      #         --rm \
      #         scalableminds/webknossos-cuber:${CIRCLE_BUILD_NUM} \
      #         wkcuber.cubing \
      #         --verbose \
      #         --jobs 1 \
      #         --layer_name color \
      #         /testdata/dm3 /testoutput/dm3
      #       [ -d testoutput/dm3/color ]
      #       [ -d testoutput/dm3/color/1 ]
      #       [ $(find testoutput/dm3/color/1 -mindepth 3 -name "*.wkw" | wc -l) -eq 16 ]

      - run:
          name: Test tile cubing
          command: tests/scripts/tile_cubing.sh

      - run:
          name: Test simple tiff cubing
          command: tests/scripts/simple_tiff_cubing.sh

      - run:
          name: Test simple tiff cubing (no compression)
          command: tests/scripts/simple_tiff_cubing_no_compression.sh

      - run:
          name: Test KNOSSOS conversion
          command: tests/scripts/knossos_conversion.sh

      - run:
          name: Decompress reference magnification data
          command: tests/scripts/decompress_reference_mag.sh

      - run:
          name: Test downsampling
          command: tests/scripts/downsampling.sh

      - run:
          name: Test anisotropic downsampling
          command: tests/scripts/anisotropic_downsampling.sh

      - run:
          name: Test compression
          command: tests/scripts/compression.sh

      - run:
          name: Test in-place compression
          command: tests/scripts/in_place_compression.sh

      - run:
          name: Test metadata generation
          command: tests/scripts/meta_generation.sh

      - run:
          name: Push docker images
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            docker tag \
              scalableminds/webknossos-cuber:$CIRCLE_BUILD_NUM \
              scalableminds/webknossos-cuber:$CIRCLE_BRANCH
            docker push scalableminds/webknossos-cuber:$CIRCLE_BUILD_NUM
            docker push scalableminds/webknossos-cuber:$CIRCLE_BRANCH
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker tag scalableminds/webknossos-cuber:$CIRCLE_BUILD_NUM scalableminds/webknossos-cuber:latest
              docker push scalableminds/webknossos-cuber:latest
            fi
            docker logout

      - run:
          name: Publish python package
          command: |
            if [ -n "$CIRCLE_TAG" ]; then
              echo "[distutils]" >> .pypirc
              echo "index-servers = pypi" >> .pypirc
              echo "[pypi]" >> .pypirc
              echo "repository=https://upload.pypi.org/legacy/" >> .pypirc
              echo "username=$PYPI_USERNAME" >> .pypirc
              echo "password=$PYPI_PASSWORD" >> .pypirc

              docker run --rm \
                --entrypoint "" \
                -v $(pwd)/.git:/app/.git \
                -v $(pwd)/.pypirc:/root/.pypirc \
                scalableminds/webknossos-cuber:${CIRCLE_BUILD_NUM} \
                python setup.py sdist upload
            else
              echo "Skipping publishing on non-tag"
            fi

workflows:
  version: 2
  default:
    jobs:
      - build_test_deploy:
          filters:
            tags:
              only: /.*/
